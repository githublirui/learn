#center os安装git
1. yum install git
2. yum install git-svn git-email git-gui gitk
#windows 安装
1. 安装Cygwin(Cygwin是一个在windows平台上运行的类UNIX模拟环境)
下载地址：https://cygwin.com/install.html
默认不安装git
search git 安装
2. msysgit ,tortoisegit

git流程
1. 在工作目录中修改某些文件
2. 对修改后的文件进行快照，然后保存到暂存区域。
3. 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。

Git 基础
1.在工作目录中初始化新仓库
git init
2.从现有仓库克隆
git clone 远程路径 本地文件夹
git clone git://github.com/schacon/grit.git ./
3.检查当前文件状态
git status 
4. 跟踪新文件
git status查看
git add README
再运行git status查看
修改README
再运行git status查看
5.忽略某些文件
cat .gitignore
    *.[oa]   #o或者a结尾的忽略
    *~ Git 忽略所有以波浪符（~）结尾的文件
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob（shell简化正则表达式） 模式匹配。
匹配模式最后跟反斜杠（/）说明要忽略的是目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

git diff 查看尚未暂存的文件更新了哪些部分
git diff --cached 查看已暂存的变更

git commit 提交
git commit 加上 -a 选项 可以提交未暂存文件

eg:
# 此为注释 – 将被 Git 忽略
    # 忽略所有 .a 结尾的文件
    *.a
    # 但 lib.a 除外
    !lib.a
    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
    /TODO
    # 忽略 build/ 目录下的所有文件
    build/
    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
    doc/*.txt

6.移除文件
git rm
git rm --cached readme.txt  #删除文件并且暂时到暂存区
7.移动文件
git mv file_from file_to
8.查看提交历史
git log
git log -p -2 则仅显示最近的两次更新

远程仓库的使用
1.查看当前的远程库
git remote -v#-v显示克隆地址
2.添加远程仓库
git remote add [shortname] [url]
git remote add pb git://github.com/paulboone/ticgit.git
3.从远程仓库抓取数据
git fetch [remote-name]
git pull <远程主机名> <远程分支名>:<本地分支名>  #取回远程主机某个分支的更新，再与本地的指定分支合并
git pull origin next:master 
4.推送数据到远程仓库
如果要把本地的 master 分支推送到 origin 服务器上
git push origin master
只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送
5.远程仓库的删除和重命名
git remote rename pb paul#pb重命名为paul
 git remote rm paul

技巧和窍门
1.自动补全
如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：
source ~/.git-completion.bash

2.Git 命令别名
git config --global alias.co checkout
    $ git config --global alias.br branch
    $ git config --global alias.ci commit
    $ git config --global alias.st status

#Git 分支
git branch

创建分支
git branch testing
切换分支
git checkout master

简写
git checkout -b iss53 相当于 git branch iss53
    $ git checkout iss53

合并分支
1.回到主干 git checkout master
2.合并分支 git merge testing

删除分支
git branch -d testing


#服务器上部署git
git init 建立一个空仓
1. git clone --bare my_project my_project.git
把裸仓库移到服务器上
scp -r my_project.git user@git.example.com:/opt/git #忽略



